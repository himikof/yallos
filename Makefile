#----------------------------------------------------------------------------
# KupOS Makefile
#
#----------------------------------------------------------------------------
# On command line:
#
# make all = Make software.
#
# make clean = Clean out built project files.
#
# make install = Write KupOs image to FDD
#
# make test = Start KupOS in QEmu for debugging.
#
# make filename.s = Just compile filename.c into the assembler code only.
#
# make filename.i = Create a preprocessed source file for use in submitting
#                   bug reports.
#
# To rebuild project do "make clean" then "make all".
#----------------------------------------------------------------------------

# Target file name (without extension).
TARGET = kupos

# Default target architecture
DARCH = x86_64

ARCH ?= $(DARCH)

# Object files directory
#     To put object files in current directory, use a dot (.), do NOT make
#     this an empty or blank macro!
OBJDIR = build/$(ARCH)

# Source files directory
SRCDIR = src/kernel src/arch/$(ARCH)

# Bootloader source files directory
BOOTSRCDIR = src/arch/$(ARCH)/boot

# Include directories
INCLUDEDIRS = src/include src/include/asm-$(ARCH)

## Kernel

KERN_SIZE_INC = src/include/asm-$(ARCH)/size.inc

# List C source files here. (C dependencies are automatically generated.)
#SRC = $(TARGET).c 
vpath %.c
vpath %.c $(SRCDIR)
#SRC = $(wildcard *.c)
SRC = main.c exceptions.c print.c die.c irq.c ctype.c string.c
#SRC := gdbstub.c

# List C++ source files here. (C dependencies are automatically generated.)
vpath %.cpp
vpath %.cpp $(SRCDIR)
CPPSRC =  $(wildcard *.cpp)

# List Assembler source files here.
vpath %.S
vpath %.S $(SRCDIR)
ASRC = head.S main.S output.S syscall.S syscall_table.S exceptions_asm.S irq_asm.S
#ASRC =  $(wildcard *.S)

## Bootloader

# List Bootloader assembler source files here.
vpath %.S
vpath %.S $(BOOTSRCDIR)
BOOTASRC = boot.S
#BOOTASRC =  $(wildcard *.S)

# Optimization level, can be [0, 1, 2, 3, s]. 
#     0 = turn off optimization. s = optimize for size.
OPT = s

# Place -D or -U options here for C sources
CDEFS =
#CFLAGS = -m64

# Place -D or -U options here for ASM sources
ADEFS = 
#ASFLAGS = --64


# Place -D or -U options here for C++ sources
CXXDEFS = 

#============================================================================


# Define programs and commands.
SHELL = sh
CC = gcc
CXX = g++
CPP = $(CC) -E
LD = ld
ASM = as
IMGWRITE = imgwrite
DD = dd
FORMAT = format
OBJCOPY = objcopy
OBJDUMP = objdump
SIZE = size
AR = ar rcs
NM = nm
REMOVE = rm -f
REMOVEDIR = rm -rf
COPY = cp
WINSHELL = cmd


# Define Messages
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------

cmd_ld = $(LD) $(LDFLAGS) $^ --output $@
quiet_cmd_ld = LD		$@

cmd_ld_T = $(LD) $(LDFLAGS) -T $^ --output $@
quiet_cmd_ld_T = $(quiet_cmd_ld)

cmd_objcopy_binary = $(OBJCOPY) -O binary -S $< $@
quiet_cmd_objcopy_binary = OBJCOPY	$@

cmd_cc = $(CC) -c $(CFLAGS) $< -o $@
quiet_cmd_cc = CC		$<

cmd_cc_S = $(CC) -S $(CFLAGS) $< -o $@
quiet_cmd_cc_S = CC -S:		$<

cmd_cc_E = $(CC) -E $(CFLAGS) $< -o $@ 
quiet_cmd_cc_E = CC -E:		$<

cmd_cxx = $(CXX) -c $(CXXFLAGS) $< -o $@
quiet_cmd_cxx = CXX:		$<

cmd_cxx_S = $(CXX) -S $(CXXFLAGS) $< -o $@
quiet_cmd_cxx_S = CXX -S:		$<

cmd_as = $(ASM) $(ASFLAGS) $< -o $@
quiet_cmd_as = AS		$<

quiet_cmd_kern_size = KERN_SIZE	$@

quiet_cmd_clean = CLEAN

MSG_WRITING_BOOT = Writing bootoader to disk:
MSG_WRITING_IMAGE = Writing image to disk:
MSG_FORMATTING = Formatting diskette:

INCLUDES=$(foreach dir,$(INCLUDEDIRS),-I $(dir))

ASFLAGS+=$(ASDEFS)
ASFLAGS+=$(INCLUDES)

CFLAGS+=$(CDEFS)
CFLAGS+=$(INCLUDES)
CFLAGS+=-Wall

CXXFLAGS+=$(CXXDEFS)
CXXFLAGS+=$(INCLUDES)
CXXFLAGS+=-Wall

#LDFLAGS+=-s -x

# Define all object files.
OBJ = $(SRC:%.c=$(OBJDIR)/%.o) $(CPPSRC:%.cpp=$(OBJDIR)/%.o) $(ASRC:%.S=$(OBJDIR)/%.o) 

BOOTOBJ = $(BOOTASRC:%.S=$(OBJDIR)/%.o)

# Output verbosity settings

ifdef V
	ifeq ($(origin V), "command line")
		BUILD_VERBOSE = 1
	endif
endif
ifndef BUILD_VERBOSE
	BUILD_VERBOSE = 1
endif

ifeq ($(BUILD_VERBOSE), 1)
	quiet = 
	Q = 
else
	quiet = quiet_
	Q = @
endif

skip_line = echo -n

ifneq ($(findstring s,$(MAKEFLAGS)),)
	quiet = silent_
endif

echo-cmd = @$(skip_line);echo -e '  $($(quiet)cmd_$(1))'

cmd = $(echo-cmd); $(cmd_$(1))

# Default target.
#all: begin gccversion build end
all: build

begin:
	@echo $(MSG_BEGIN)

end:
	@echo $(MSG_END)
    
# Display compiler version information.
gccversion : 
	@$(CC) --version

build: kernel.bin $(KERN_SIZE_INC) boot.bin

$(KERN_SIZE_INC): kernel.bin
	$(call echo-cmd,kern_size)
	$(Q)echo "/* This file was autogenerated by make */" > $(KERN_SIZE_INC)
	$(Q)(echo -n "KERN_SIZE = ";(ls kernel.bin -l|tr ' ' '\n'|tail -n 5|head -n 1);) >> $(KERN_SIZE_INC)

# Create bin file from output file.
%.bin: $(OBJDIR)/%
	$(call cmd,objcopy_binary)

# Link: create output file from object files.
.SECONDARY : $(OBJDIR)/kernel
.PRECIOUS : $(OBJ)
$(OBJDIR)/kernel: src/arch/$(ARCH)/kernel.ld $(OBJ)
	$(call cmd,ld_T)

# Link: create output file from object files.
.SECONDARY : $(OBJDIR)/boot
.PRECIOUS : $(BOOTOBJ)
$(OBJDIR)/boot: src/arch/$(ARCH)/boot/boot.ld $(BOOTOBJ) 
	$(call cmd,ld_T)

# Compile: create object files from C source files.
vpath %.c
vpath %.c $(SRCDIR)
$(OBJDIR)/%.o : %.c
	$(call cmd,cc)


# Compile: create object files from C++ source files.
vpath %.cpp
vpath %.cpp $(SRCDIR)
$(OBJDIR)/%.o : %.cpp
	$(call cmd,cxx)


# Compile: create assembler files from C source files.
%.s : %.c
	$(call cmd,cc_S)


# Compile: create assembler files from C++ source files.
%.s : %.cpp
	$(call cmd,cxx_S)

# Assemble: create object files from assembler source files.
vpath %.S
vpath %.S $(SRCDIR)
vpath %.S $(BOOTSRCDIR)
$(OBJDIR)/%.o : %.S
	$(call cmd,as)

# Create preprocessed source for use in sending a bug report.
%.i : %.c
	$(call cmd,cc_E)

# Target: clean project.
clean: clean_list

clean_list :
	$(call echo-cmd,clean)
	$(Q)$(REMOVE) *.bin
	$(Q)$(REMOVE) $(OBJDIR)/*
	$(Q)$(REMOVE) src/include/size.inc


# Create object files directory
$(shell mkdir $(OBJDIR) 2>/dev/null)

install: build callbat

update: build callbatquick

callbat:
	$(WINSHELL) /C install.bat

callbatquick:
	$(WINSHELL) /C install.bat quick

format:
	@echo
	@echo $(MSG_FORMATTING)
	$(FORMAT) a: /V:KUPOS /Q

writeimg:
	@echo
	@echo $(MSG_WRITING_IMAGE)
	$(COPY) kernel.bin a:\

writeboot:
	@echo
	@echo $(MSG_WRITING_BOOT)
	$(DD) if=boot.bin of=\\.\a: count=1 
